// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from repository.djinni

package de.jb.synclib;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Repository {
    @Nullable
    public abstract Directory getDirectoryTree();

    @Nullable
    public abstract InputStream read(@NonNull File from);

    @Nullable
    public abstract OutputStream write(@NonNull File to);

    public abstract void remove(@NonNull File file);

    @Nullable
    public static native Repository createFromFileSystem(@NonNull String directoryPath);

    private static final class CppProxy extends Repository
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            destroy();
            super.finalize();
        }

        @Override
        public Directory getDirectoryTree()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDirectoryTree(this.nativeRef);
        }
        private native Directory native_getDirectoryTree(long _nativeRef);

        @Override
        public InputStream read(File from)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_read(this.nativeRef, from);
        }
        private native InputStream native_read(long _nativeRef, File from);

        @Override
        public OutputStream write(File to)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_write(this.nativeRef, to);
        }
        private native OutputStream native_write(long _nativeRef, File to);

        @Override
        public void remove(File file)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_remove(this.nativeRef, file);
        }
        private native void native_remove(long _nativeRef, File file);
    }
}
