// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from directory_tree.djinni

#include "NativeCompareResult.hpp"  // my header
#include "Marshal.hpp"
#include "NativeFile.hpp"

namespace djinni_generated {

NativeCompareResult::NativeCompareResult() = default;

NativeCompareResult::~NativeCompareResult() = default;

auto NativeCompareResult::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeCompareResult>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::List<::djinni_generated::NativeFile>::fromCpp(jniEnv, c.onlyInA)),
                                                           ::djinni::get(::djinni::List<::djinni_generated::NativeFile>::fromCpp(jniEnv, c.onlyInB)),
                                                           ::djinni::get(::djinni::List<::djinni_generated::NativeFile>::fromCpp(jniEnv, c.conflicting)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeCompareResult::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 4);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeCompareResult>::get();
    return {::djinni::List<::djinni_generated::NativeFile>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_mOnlyInA)),
            ::djinni::List<::djinni_generated::NativeFile>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_mOnlyInB)),
            ::djinni::List<::djinni_generated::NativeFile>::toCpp(jniEnv, jniEnv->GetObjectField(j, data.field_mConflicting))};
}

}  // namespace djinni_generated
