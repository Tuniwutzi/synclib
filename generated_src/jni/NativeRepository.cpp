// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from repository.djinni

#include "NativeRepository.hpp"  // my header
#include "Marshal.hpp"
#include "NativeDirectory.hpp"
#include "NativeFile.hpp"
#include "NativeInputStream.hpp"
#include "NativeOutputStream.hpp"

namespace djinni_generated {

NativeRepository::NativeRepository() : ::djinni::JniInterface<::synclib::Repository, NativeRepository>("de/jb/synclib/Repository$CppProxy") {}

NativeRepository::~NativeRepository() = default;


CJNIEXPORT void JNICALL Java_de_jb_synclib_Repository_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::synclib::Repository>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_de_jb_synclib_Repository_00024CppProxy_native_1getDirectoryTree(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::synclib::Repository>(nativeRef);
        auto r = ref->getDirectoryTree();
        return ::djinni::release(::djinni_generated::NativeDirectory::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_de_jb_synclib_Repository_00024CppProxy_native_1read(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_from)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::synclib::Repository>(nativeRef);
        auto r = ref->read(::djinni_generated::NativeFile::toCpp(jniEnv, j_from));
        return ::djinni::release(::djinni_generated::NativeInputStream::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_de_jb_synclib_Repository_00024CppProxy_native_1write(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_to)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::synclib::Repository>(nativeRef);
        auto r = ref->write(::djinni_generated::NativeFile::toCpp(jniEnv, j_to));
        return ::djinni::release(::djinni_generated::NativeOutputStream::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_de_jb_synclib_Repository_00024CppProxy_native_1remove(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_file)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::synclib::Repository>(nativeRef);
        ref->remove(::djinni_generated::NativeFile::toCpp(jniEnv, j_file));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_de_jb_synclib_Repository_createFromFileSystem(JNIEnv* jniEnv, jobject /*this*/, jstring j_directoryPath)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::synclib::Repository::createFromFileSystem(::djinni::String::toCpp(jniEnv, j_directoryPath));
        return ::djinni::release(::djinni_generated::NativeRepository::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
